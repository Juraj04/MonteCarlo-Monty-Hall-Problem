unit MonteCarloFrame;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, GR32_RangeBars,
  Vcl.ExtCtrls, Vcl.ComCtrls, NetGraph, VclTee.TeeGDIPlus, VCLTee.TeEngine,
  VCLTee.TeeProcs, VCLTee.Chart, VCLTee.Series, MonteCarlo;

type
  TForm2 = class(TForm)
    PanelSettings: TPanel;
    EditReplications: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    EditWarm: TEdit;
    TrackBarDoors: TTrackBar;
    Label4: TLabel;
    LabelDoorNumber: TLabel;
    CheckBoxWithChange: TCheckBox;
    CheckBoxWithoutChange: TCheckBox;
    Panel1: TPanel;
    Panel2: TPanel;
    ButtonStart: TButton;
    ButtonStop: TButton;
    Panel3: TPanel;
    ChartMontyHall: TChart;
    Label5: TLabel;
    Label6: TLabel;
    Series1: TLineSeries;
    Series2: TLineSeries;
    Label3: TLabel;
    Label7: TLabel;
    procedure OnCreate(Sender: TObject);
    procedure TrackBarDoorsChange(Sender: TObject);
    procedure ButtonStartClick(Sender: TObject);
    procedure ButtonStopClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure OnTaskFinished(Sender: TObject);
    procedure AppShortCut(var Msg: TWMKey; var Handled: Boolean);
  private
    { Private declarations }
    FMc: TMontyHallProblem;
    FSkip: Integer;
    FWritingPeriod: Integer;
    FIgnoreWritingPeriod: Boolean;
     /// <summary>
     ///  Zobrazovanie vypocitanych dat pre MontyHall problem
     /// </summary>
     /// <param name="paChanged">
     ///  Aktualny pocer vyhier ak zmenil rozhodnutie
     /// </param>
     /// <param name="paKept">
     ///  Aktualny pocet vyhier ak nezmenil rozhodnutie
     /// </param>
     /// <param name="paIteration">
     ///  Aktualna iteracia
     /// </param>
    procedure ShowMontyHallData(paChanged: Integer; paKept: Integer; paIteration: Integer);
    /// <summary>
    ///   Defaultne vyplnenie guicka
    /// </summary>
    procedure FillOut;
    /// <summary>
    ///   Zistuje ci nie je editbox prazdny
    /// </summary>
     /// <param name="paEditBox">
     ///  Edit box
     /// </param>
     /// <param name="paName">
     ///  Meno kvoli hlaske
     /// </param>
     /// <returns>
     ///   Vyplnene/nevyplnene
     /// </returns>
    function EnteredEditBox(paEditBox: TEdit; paName: string): Boolean;

    /// <summary>
    ///   Overuje ci warm up bol spravne zadany <0,100>
    /// </summary>
    /// <returns>
    ///   Spravne/nespravne
    /// </returns>
    function CheckWarmUp: Boolean;
    /// <summary>
    ///   Overuje ci replikacie boli spravne zadany <200,maxint>
    /// </summary>
    /// <returns>
    ///   Spravne/nespravne
    /// </returns>
    function CheckReplications: Boolean;
    /// <summary>
    ///   Overuje ci je zaskrtnuty aspon jeden checkbox
    /// </summary>
    /// <returns>
    ///   Ano/Nie
    /// </returns>
    function CheckCheckBoxes: Boolean;
  public
    { Public declarations }
  end;

var
  Form2: TForm2;

const
  POINTS_IN_GRAPH: Integer = 100;  //nech je v grafe maximalne 1000

implementation

resourcestring
  rsEnterMoreRep = 'Enter more replications';
  rsCheckLine = 'Check at least one line for graph';
  rsReplication = 'Replication';
  rsWrongRepNumber = 'Wrong replication number inserted';
  rsNotValidWarmUp = 'Not valid warm up percentage';
  rsEnterValueFor = 'Enter value for ';


{$R *.dfm}

procedure TForm2.AppShortCut(var Msg: TWMKey; var Handled: Boolean);
begin
  ShowMessage('huehue');
end;

procedure TForm2.ButtonStartClick(Sender: TObject);
var

  replic: Integer;
  warm: double;
begin
  if CheckReplications and CheckWarmUp and CheckCheckBoxes then
  begin
    Series1.Clear;
    Series2.Clear;
    replic := StrToInt(EditReplications.Text);
    warm := StrToInt(EditWarm.Text)/100.0;
    FSkip := Round(replic * warm);
    if replic - FSkip < 2 then
    begin
      ShowMessage(rsEnterMoreRep);
      Exit;
    end;
    FIgnoreWritingPeriod := (replic - FSkip) < POINTS_IN_GRAPH;
    FWritingPeriod := (replic - FSkip) div POINTS_IN_GRAPH;

    if FMc <> nil then
    begin
      Fmc.StopReplications;
      FreeAndNil(FMc);
    end;

    FMc := TMontyHallProblem.Create(replic, TrackBarDoors.Position);
    FMc.OnDataWriting := ShowMontyHallData;
    FMc.OnEndTask := OnTaskFinished;
    FMc.RunReplications;
    ButtonStart.Enabled := False;
    ButtonStop.Enabled := True;
  end;
end;

procedure TForm2.ButtonStopClick(Sender: TObject);
begin
  if FMc <> nil then FMc.StopReplications;
  FreeAndNil(FMc);
end;

function TForm2.CheckCheckBoxes: Boolean;
begin
  Result := True;
  if not CheckBoxWithChange.Checked and not CheckBoxWithoutChange.Checked then
  begin
    ShowMessage(rsCheckLine);
    Exit(False);
  end;
end;

function TForm2.CheckReplications: Boolean;
var
  value: Integer;
begin
  Result := False;
  if EnteredEditBox(EditWarm, rsReplication) then
  begin
    if TryStrToInt(EditReplications.Text, value) then   // az od 200 to pekne kresli
    begin
      Exit(True);
    end
    else
    begin
      ShowMessage(rsWrongRepNumber);
      EditReplications.Text := 1000000.ToString;
    end;
  end;
end;

function TForm2.CheckWarmUp: Boolean;
const
  percent: set of 0..100 = [0..100];
begin
  Result := False;
  if EnteredEditBox(EditWarm, 'Warm up') then
  begin
    if StrToInt(EditWarm.Text) in percent then
    begin
      Exit(True);
    end
    else ShowMessage(rsNotValidWarmUp);
  end;

end;


function TForm2.EnteredEditBox(paEditBox: TEdit; paName: string): Boolean;
var
  number: Integer;
begin
  Result := True;
  if paEditBox.Text = '' then
  begin
    ShowMessage(rsEnterValueFor + paName);
    Exit(False);
  end;
end;

procedure TForm2.FillOut;
begin
  EditWarm.Text := 30.ToString;
  EditReplications.Text := 1000000.ToString;
end;

procedure TForm2.FormDestroy(Sender: TObject);
begin
  if FMc <> nil then FMc.StopReplications;
  FreeAndNil(FMc);
end;

procedure TForm2.OnCreate(Sender: TObject);
begin
  LabelDoorNumber.Caption := TrackBarDoors.Position.ToString;
  FillOut;
  ButtonStop.Enabled := False;
end;

procedure TForm2.OnTaskFinished(Sender: TObject);
begin
  ButtonStart.Enabled := True;
  ButtonStop.Enabled := False;
end;

procedure TForm2.ShowMontyHallData(paChanged, paKept, paIteration: Integer);
var
  helpBool: Boolean;
begin
  if (paIteration > FSkip) then
  begin
    helpBool := ((not FIgnoreWritingPeriod) and ((paIteration - FSkip) mod FWritingPeriod = 1));
    if (FIgnoreWritingPeriod) or (helpBool) then
    begin
      Label5.Caption := Format('%n', [paChanged/paIteration*100]);
      Label6.Caption := Format('%n', [paKept/paIteration*100]);
      if CheckBoxWithChange.Checked then Series1.AddXY(paIteration, paChanged/paIteration*100);
      if CheckBoxWithoutChange.Checked then Series2.AddXY(paIteration, paKept/paIteration*100);
    end;
  end;
end;

procedure TForm2.TrackBarDoorsChange(Sender: TObject);
begin
  LabelDoorNumber.Caption := TrackBarDoors.Position.ToString;
end;

end.
